name: Deploy Kadane-Backend to Amazon ECS

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'
      - '.github/workflows/aws-backend.yml'
      - '.github/workflows/task-definition-backend.json'

env:
  DOCKERFILE: docker/backend/Dockerfile
  ECR_REPOSITORY: kadane/backend             # set this to your Amazon ECR repository name
  ECS_SERVICE: KadaneProdBackendService    # set this to your Amazon ECS service name
  ECS_CLUSTER: KadaneProdBackendCluster         # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/task-definition-backend.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: kadane-backend             # set this to the name of the container in the
  APP_PORT: 80 # set this to the port your application listens on
  TARGET_GROUP_ARN: arn:aws:elasticloadbalancing:us-east-2:905418014870:targetgroup/kadane-prod-backend-target/2540c60e1be5d8b6 
  CONTAINER_PORT: 80 # Port inside your container where the app is running
  GO_VERSION: 1.23 # set this to the version of Go

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    # temporary allow failure for testing
    allow-failure: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Setup Docker
        uses: docker/setup-docker-action@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download
    
      - name: Install sqlc
        run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

      - name: Run sqlc
        run: sqlc generate -f src/sql/sqlc.yaml

      - name: Run tests
        run: go test -v -race -covermode=atomic ./...

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download
    
      - name: Install sqlc
        run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

      - name: Run sqlc
        run: sqlc generate -f src/sql/sqlc.yaml
    
      - name: Build the backend
        run: CGO_ENABLED=0 go build -ldflags "-s -w" -o server src/cmd/main.go 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            PORT=${{ vars.SERVICE_PORT}}
            POSTGRES_URL=${{ secrets.AWS_DB_HOST }}:${{ secrets.AWS_DB_PORT }}
            POSTGRES_USER=${{ secrets.AWS_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.AWS_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.AWS_DB_NAME }}
            FIREBASE_CRED=${{ secrets.AWS_FIREBASE_CRED }}
            AWS_KEY=${{ secrets.AWS_KEY }}
            AWS_SECRET=${{ secrets.AWS_SECRET }}
            AWS_REGION=${{ vars.AWS_REGION }}
            AWS_BUCKET_AVATAR=${{ secrets.AWS_BUCKET_AVATAR }}
            CLOUD_FRONT_URL=${{ secrets.CLOUD_FRONT_URL }}
            JUDGE0_TOKEN=${{ secrets.JUDGE0_TOKEN }}
            JUDGE0_URL=${{ secrets.JUDGE0_URL }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false 

      - name: Update ECS service with load balancer
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --load-balancers targetGroupArn=${{ env.TARGET_GROUP_ARN }},containerName=${{ env.CONTAINER_NAME }},containerPort=${{ env.CONTAINER_PORT }} \
          --force-new-deployment
