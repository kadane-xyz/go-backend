name: Deploy Kadane-Backend to Amazon ECS

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'openapi.yml'
      - 'docker-compose.yml'
      - 'README.md'
      - 'docker/backend-doc/**'

env:
  AWS_REGION: us-east-2                 # set this to your preferred AWS region, e.g. us-west-1
  DOCKERFILE: docker/backend/Dockerfile
  ECR_REPOSITORY: kadane-backend             # set this to your Amazon ECR repository name
  ECS_SERVICE: KadaneBackendService    # set this to your Amazon ECS service name
  ECS_CLUSTER: KadaneBackend         # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/task-definition-backend.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: kadane-backend             # set this to the name of the container in the
  APP_PORT: 80 # set this to the port your application listens on
  TARGET_GROUP_ARN: arn:aws:elasticloadbalancing:us-east-2:905418014870:targetgroup/KadaneBackendECSCluster/0a76c7dc2d0480de 
  CONTAINER_PORT: 80 # Port inside your container where the app is running

permissions:
  contents: write
  id-token: write

jobs:
  # Build and deploy the container
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
          PORT=${{ vars.SERVICE_PORT}}
          POSTGRES_URL=${{ secrets.AWS_DB_HOST }}:${{ secrets.AWS_DB_PORT }}
          POSTGRES_USER=${{ secrets.AWS_DB_USER }}
          POSTGRES_PASSWORD=${{ secrets.AWS_DB_PASSWORD }}
          POSTGRES_DB=${{ secrets.AWS_DB_NAME }}
          FIREBASE_CRED=${{ secrets.AWS_FIREBASE_CRED }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false 

    - name: Update ECS service with load balancer
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --load-balancers targetGroupArn=${{ env.TARGET_GROUP_ARN }},containerName=${{ env.CONTAINER_NAME }},containerPort=${{ env.CONTAINER_PORT }} \
          --force-new-deployment
