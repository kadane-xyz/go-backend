// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: solutions.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSolution = `-- name: CreateSolution :one

INSERT INTO solution (user_id, title, body, problem_id, tags)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, problem_id, title, body, created_at, votes, tags
`

type CreateSolutionParams struct {
	UserID    pgtype.Text `json:"userId"`
	Title     string      `json:"title"`
	Body      string      `json:"body"`
	ProblemID pgtype.Int8 `json:"problemId"`
	Tags      []string    `json:"tags"`
}

// POST --
func (q *Queries) CreateSolution(ctx context.Context, arg CreateSolutionParams) (Solution, error) {
	row := q.db.QueryRow(ctx, createSolution,
		arg.UserID,
		arg.Title,
		arg.Body,
		arg.ProblemID,
		arg.Tags,
	)
	var i Solution
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProblemID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.Votes,
		&i.Tags,
	)
	return i, err
}

const deleteSolution = `-- name: DeleteSolution :exec

DELETE FROM solution WHERE id = $1 AND user_id = $2
`

type DeleteSolutionParams struct {
	ID     int64       `json:"id"`
	UserID pgtype.Text `json:"userId"`
}

// DELETE --
func (q *Queries) DeleteSolution(ctx context.Context, arg DeleteSolutionParams) error {
	_, err := q.db.Exec(ctx, deleteSolution, arg.ID, arg.UserID)
	return err
}

const getSolution = `-- name: GetSolution :one

SELECT 
    s.id, s.user_id, s.problem_id, s.title, s.body, s.created_at, s.votes, s.tags,
    a.username as user_username,
    a.avatar_url as user_avatar_url,
    a.level as user_level,
    COALESCE(c.comment_count, 0)::int as comments_count,
    COALESCE(v.vote_count, 0)::int as votes_count,
    COALESCE(uv.vote, 'none') as user_vote,
    CASE WHEN EXISTS (SELECT 1 FROM starred_solution WHERE solution_id = s.id AND starred_solution.user_id = $1) THEN true ELSE false END AS starred
FROM solution s
LEFT JOIN (
    SELECT id, username, avatar_url, level
    FROM account
) a ON s.user_id = a.id
LEFT JOIN (
    SELECT solution_id, COUNT(*) AS comment_count
    FROM comment
    GROUP BY solution_id
) c ON s.id = c.solution_id
LEFT JOIN (
    SELECT solution_id, COUNT(*) AS vote_count
    FROM solution_user_vote
    GROUP BY solution_id
) v ON s.id = v.solution_id
LEFT JOIN (
    SELECT solution_id, vote, user_id
    FROM solution_user_vote suv
    WHERE suv.user_id = $1
) uv ON s.id = uv.solution_id
WHERE s.id = $2
`

type GetSolutionParams struct {
	UserID string `json:"userId"`
	ID     int64  `json:"id"`
}

type GetSolutionRow struct {
	ID            int64            `json:"id"`
	UserID        pgtype.Text      `json:"userId"`
	ProblemID     pgtype.Int8      `json:"problemId"`
	Title         string           `json:"title"`
	Body          string           `json:"body"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
	Votes         pgtype.Int4      `json:"votes"`
	Tags          []string         `json:"tags"`
	UserUsername  string           `json:"userUsername"`
	UserAvatarUrl pgtype.Text      `json:"userAvatarUrl"`
	UserLevel     int32            `json:"userLevel"`
	CommentsCount int32            `json:"commentsCount"`
	VotesCount    int32            `json:"votesCount"`
	UserVote      VoteType         `json:"userVote"`
	Starred       bool             `json:"starred"`
}

// GET --
func (q *Queries) GetSolution(ctx context.Context, arg GetSolutionParams) (GetSolutionRow, error) {
	row := q.db.QueryRow(ctx, getSolution, arg.UserID, arg.ID)
	var i GetSolutionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProblemID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.Votes,
		&i.Tags,
		&i.UserUsername,
		&i.UserAvatarUrl,
		&i.UserLevel,
		&i.CommentsCount,
		&i.VotesCount,
		&i.UserVote,
		&i.Starred,
	)
	return i, err
}

const getSolutionById = `-- name: GetSolutionById :one
SELECT 1 FROM solution WHERE id = $1
`

func (q *Queries) GetSolutionById(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRow(ctx, getSolutionById, id)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getSolutionVote = `-- name: GetSolutionVote :one
SELECT vote FROM solution_user_vote
WHERE user_id = $1 AND solution_id = $2
`

type GetSolutionVoteParams struct {
	UserID     string `json:"userId"`
	SolutionID int64  `json:"solutionId"`
}

func (q *Queries) GetSolutionVote(ctx context.Context, arg GetSolutionVoteParams) (VoteType, error) {
	row := q.db.QueryRow(ctx, getSolutionVote, arg.UserID, arg.SolutionID)
	var vote VoteType
	err := row.Scan(&vote)
	return vote, err
}

const getSolutions = `-- name: GetSolutions :many
SELECT 
    s.id, s.user_id, s.problem_id, s.title, s.body, s.created_at, s.votes, s.tags,
    a.username as user_username,
    a.avatar_url as user_avatar_url,
    a.level as user_level,
    COALESCE(c.comment_count, 0)::int as comments_count,
    COALESCE(v.vote_count, 0)::int as votes_count,
    COALESCE(uv.vote, 'none') as user_vote
FROM solution s
LEFT JOIN account a ON s.user_id = a.id
LEFT JOIN (
    SELECT solution_id, COUNT(*) AS comment_count
    FROM comment
    GROUP BY solution_id
) c ON s.id = c.solution_id
LEFT JOIN (
    SELECT solution_id, COUNT(*) AS vote_count
    FROM solution_user_vote
    GROUP BY solution_id
) v ON s.id = v.solution_id
LEFT JOIN (
    SELECT solution_id, vote, user_id
    FROM solution_user_vote suv
    WHERE suv.user_id = $2
) uv ON s.id = uv.solution_id
WHERE s.id = $1
`

type GetSolutionsParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"userId"`
}

type GetSolutionsRow struct {
	ID            int64            `json:"id"`
	UserID        pgtype.Text      `json:"userId"`
	ProblemID     pgtype.Int8      `json:"problemId"`
	Title         string           `json:"title"`
	Body          string           `json:"body"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
	Votes         pgtype.Int4      `json:"votes"`
	Tags          []string         `json:"tags"`
	UserUsername  pgtype.Text      `json:"userUsername"`
	UserAvatarUrl pgtype.Text      `json:"userAvatarUrl"`
	UserLevel     pgtype.Int4      `json:"userLevel"`
	CommentsCount int32            `json:"commentsCount"`
	VotesCount    int32            `json:"votesCount"`
	UserVote      VoteType         `json:"userVote"`
}

func (q *Queries) GetSolutions(ctx context.Context, arg GetSolutionsParams) ([]GetSolutionsRow, error) {
	rows, err := q.db.Query(ctx, getSolutions, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSolutionsRow
	for rows.Next() {
		var i GetSolutionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProblemID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.Votes,
			&i.Tags,
			&i.UserUsername,
			&i.UserAvatarUrl,
			&i.UserLevel,
			&i.CommentsCount,
			&i.VotesCount,
			&i.UserVote,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSolutionsByID = `-- name: GetSolutionsByID :many
SELECT 
    s.id,
    a.username, -- username instead of user_id
    s.title,
    s.body,
    s.problem_id,
    s.tags,
    s.created_at,
    s.votes
FROM solution s
JOIN account a ON s.user_id = a.id
WHERE s.id = ANY($1::int[])
`

type GetSolutionsByIDRow struct {
	ID        int64            `json:"id"`
	Username  string           `json:"username"`
	Title     string           `json:"title"`
	Body      string           `json:"body"`
	ProblemID pgtype.Int8      `json:"problemId"`
	Tags      []string         `json:"tags"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	Votes     pgtype.Int4      `json:"votes"`
}

func (q *Queries) GetSolutionsByID(ctx context.Context, ids []int32) ([]GetSolutionsByIDRow, error) {
	rows, err := q.db.Query(ctx, getSolutionsByID, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSolutionsByIDRow
	for rows.Next() {
		var i GetSolutionsByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Title,
			&i.Body,
			&i.ProblemID,
			&i.Tags,
			&i.CreatedAt,
			&i.Votes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSolutionsCount = `-- name: GetSolutionsCount :one
SELECT COUNT(*) FROM solution
WHERE problem_id = $1
  AND ($2 = '' OR title ILIKE '%' || $2 || '%')
  AND (array_length($3::text[], 1) IS NULL OR tags && $3)
`

type GetSolutionsCountParams struct {
	ProblemID pgtype.Int8 `json:"problemId"`
	Title     interface{} `json:"title"`
	Tags      []string    `json:"tags"`
}

func (q *Queries) GetSolutionsCount(ctx context.Context, arg GetSolutionsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getSolutionsCount, arg.ProblemID, arg.Title, arg.Tags)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSolutionsPaginated = `-- name: GetSolutionsPaginated :many
WITH filtered_solutions AS (
    SELECT s.id
    FROM solution s
    LEFT JOIN comment c ON s.id = c.solution_id
    LEFT JOIN solution_user_vote suv ON s.id = suv.solution_id
    LEFT JOIN starred_solution sp ON s.id = sp.solution_id
    WHERE
        ($4 = '' OR s.title ILIKE '%' || $4 || '%')
        AND ($3::text[] IS NULL OR s.tags && $3::text[])
        AND ($1 IS NULL OR s.user_id = $1)
        AND ($2 IS NULL OR s.problem_id = $2)
    GROUP BY s.id, sp.solution_id
)
SELECT
    s.id, s.user_id, s.problem_id, s.title, s.body, s.created_at, s.votes, s.tags,
    a.username as user_username,
    a.avatar_url as user_avatar_url,
    a.level as user_level,
    COALESCE(c.comment_count, 0)::int as comments_count,
    COALESCE(v.vote_count, 0)::int as votes_count,
    COALESCE(uv.vote, 'none') as user_vote,
    CASE WHEN EXISTS (SELECT 1 FROM starred_solution WHERE solution_id = s.id AND starred_solution.user_id = $1) THEN true ELSE false END AS starred,
    (SELECT COUNT(*) FROM filtered_solutions)::int as total_count
FROM solution s
LEFT JOIN (
    SELECT id, username, avatar_url, level
    FROM account
) a ON s.user_id = a.id
LEFT JOIN (
    SELECT solution_id, COUNT(*) AS comment_count
    FROM comment
    GROUP BY solution_id
) c ON s.id = c.solution_id
LEFT JOIN (
    SELECT solution_id, COUNT(*) AS vote_count
    FROM solution_user_vote
    GROUP BY solution_id
) v ON s.id = v.solution_id
LEFT JOIN (
    SELECT solution_id, vote, user_id
    FROM solution_user_vote suv
    WHERE suv.user_id = $1
) uv ON s.id = uv.solution_id
WHERE s.problem_id = $2
  AND ($3::text[] IS NULL OR s.tags && $3::text[])
  AND ($4::text IS NULL OR s.title ILIKE '%' || $4 || '%')
ORDER BY 
    (CASE WHEN $5 = 'id' AND $6 = 'ASC' THEN s.id END) ASC,
    (CASE WHEN $5 = 'id' AND $6 = 'DESC' THEN s.id END) DESC,
    (CASE WHEN $5 = 'created_at' AND $6 = 'ASC' THEN s.created_at END) ASC,
    (CASE WHEN $5 = 'created_at' AND $6 = 'DESC' THEN s.created_at END) DESC,
    (CASE WHEN $5 = 'username' AND $6 = 'ASC' THEN a.username END) ASC,
    (CASE WHEN $5 = 'username' AND $6 = 'DESC' THEN a.username END) DESC,
    (CASE WHEN $5 = 'votes' AND $6 = 'ASC' THEN s.votes END) ASC,
    (CASE WHEN $5 = 'votes' AND $6 = 'DESC' THEN s.votes END) DESC,
    s.id DESC
LIMIT $8::int
OFFSET (($7::int) - 1) * $8::int
`

type GetSolutionsPaginatedParams struct {
	UserID        string      `json:"userId"`
	ProblemID     pgtype.Int8 `json:"problemId"`
	Tags          []string    `json:"tags"`
	Title         string      `json:"title"`
	Sort          interface{} `json:"sort"`
	SortDirection interface{} `json:"sortDirection"`
	Page          int32       `json:"page"`
	PerPage       int32       `json:"perPage"`
}

type GetSolutionsPaginatedRow struct {
	ID            int64            `json:"id"`
	UserID        pgtype.Text      `json:"userId"`
	ProblemID     pgtype.Int8      `json:"problemId"`
	Title         string           `json:"title"`
	Body          string           `json:"body"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
	Votes         pgtype.Int4      `json:"votes"`
	Tags          []string         `json:"tags"`
	UserUsername  string           `json:"userUsername"`
	UserAvatarUrl pgtype.Text      `json:"userAvatarUrl"`
	UserLevel     int32            `json:"userLevel"`
	CommentsCount int32            `json:"commentsCount"`
	VotesCount    int32            `json:"votesCount"`
	UserVote      VoteType         `json:"userVote"`
	Starred       bool             `json:"starred"`
	TotalCount    int32            `json:"totalCount"`
}

func (q *Queries) GetSolutionsPaginated(ctx context.Context, arg GetSolutionsPaginatedParams) ([]GetSolutionsPaginatedRow, error) {
	rows, err := q.db.Query(ctx, getSolutionsPaginated,
		arg.UserID,
		arg.ProblemID,
		arg.Tags,
		arg.Title,
		arg.Sort,
		arg.SortDirection,
		arg.Page,
		arg.PerPage,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSolutionsPaginatedRow
	for rows.Next() {
		var i GetSolutionsPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProblemID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.Votes,
			&i.Tags,
			&i.UserUsername,
			&i.UserAvatarUrl,
			&i.UserLevel,
			&i.CommentsCount,
			&i.VotesCount,
			&i.UserVote,
			&i.Starred,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSolutionsWithCommentsCount = `-- name: GetSolutionsWithCommentsCount :many
SELECT s.id, s.user_id, s.problem_id, s.title, s.body, s.created_at, s.votes, s.tags, COALESCE(comment_counts.comments_count, 0) AS comments_count
FROM solution s
LEFT JOIN (
    SELECT solution_id, COUNT(*) AS comments_count
    FROM comment
    GROUP BY solution_id
) comment_counts ON s.id = comment_counts.solution_id
WHERE s.problem_id = $1
`

type GetSolutionsWithCommentsCountRow struct {
	ID            int64            `json:"id"`
	UserID        pgtype.Text      `json:"userId"`
	ProblemID     pgtype.Int8      `json:"problemId"`
	Title         string           `json:"title"`
	Body          string           `json:"body"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
	Votes         pgtype.Int4      `json:"votes"`
	Tags          []string         `json:"tags"`
	CommentsCount int64            `json:"commentsCount"`
}

func (q *Queries) GetSolutionsWithCommentsCount(ctx context.Context, problemID pgtype.Int8) ([]GetSolutionsWithCommentsCountRow, error) {
	rows, err := q.db.Query(ctx, getSolutionsWithCommentsCount, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSolutionsWithCommentsCountRow
	for rows.Next() {
		var i GetSolutionsWithCommentsCountRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProblemID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.Votes,
			&i.Tags,
			&i.CommentsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSolution = `-- name: UpdateSolution :one

UPDATE solution
SET title = $1, body = $2, tags = $3
WHERE id = $4 AND user_id = $5
RETURNING id, user_id, problem_id, title, body, created_at, votes, tags
`

type UpdateSolutionParams struct {
	Title  string      `json:"title"`
	Body   string      `json:"body"`
	Tags   []string    `json:"tags"`
	ID     int64       `json:"id"`
	UserID pgtype.Text `json:"userId"`
}

// PUT --
func (q *Queries) UpdateSolution(ctx context.Context, arg UpdateSolutionParams) (Solution, error) {
	row := q.db.QueryRow(ctx, updateSolution,
		arg.Title,
		arg.Body,
		arg.Tags,
		arg.ID,
		arg.UserID,
	)
	var i Solution
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProblemID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.Votes,
		&i.Tags,
	)
	return i, err
}

const voteSolution = `-- name: VoteSolution :exec

SELECT set_solution_vote($1::text, $2::bigint, $3::vote_type)
`

type VoteSolutionParams struct {
	UserID     string   `json:"userId"`
	SolutionID int64    `json:"solutionId"`
	Vote       VoteType `json:"vote"`
}

// PATCH --
func (q *Queries) VoteSolution(ctx context.Context, arg VoteSolutionParams) error {
	_, err := q.db.Exec(ctx, voteSolution, arg.UserID, arg.SolutionID, arg.Vote)
	return err
}
