services:
 # api:
 #   build: .
 #   ports:
 #     - 80:80/tcp
 #   healthcheck:
 #     test: ["CMD", "curl", "-f", "http://127.0.0.1/health"]
 #     interval: 5s
 #     timeout: 5s
 #     retries: 5
 #   env_file: 
 #     - '.env'
 #   restart: unless-stopped
  doc:
    image: redocly/redoc
    ports:
      - 8080:80/tcp
    environment:
      SPEC_URL: swagger.yaml
    volumes:
      - ./docs/openapi.yaml:/usr/share/nginx/html/swagger.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  db:
    container_name: postgres
    image: postgres:15
    ports:
      - 5432:5432/tcp
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./database/schemas:/docker-entrypoint-initdb.d/schemas
      - ./database/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./database/data:/docker-entrypoint-initdb.d/data
    env_file:
      - '.env' 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  redis:
    image: redis:7.2
    command: [
      "bash", "-c",
      'docker-entrypoint.sh --appendonly no --requirepass "$$REDIS_PASSWORD"'
    ]
    env_file: judge0.conf
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  #CGROUP v1 required for now
  judge0-server:
    image: judge0/judge0:1.13.1
    volumes:
      - ./judge0.conf:/judge0.conf:ro
    ports:
      - 2358:2358/tcp
    privileged: true
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
  judge0-worker:
    image: judge0/judge0:1.13.1
    command: ["./scripts/workers"]
    volumes:
      - ./judge0.conf:/judge0.conf:ro
    privileged: true
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
  #bytebase:
  #  container_name: bytebase
  #  image: bytebase/bytebase:3.1.1
  #  ports:
  #    - 8081:8080/tcp
  #  volumes:
  #    - bytebase:/var/opt/bytebase
  #  restart: unless-stopped
volumes:
  postgres:
  #bytebase:

